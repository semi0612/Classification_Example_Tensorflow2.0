input_tensor = Input(shape=(IMG_HEIGHT, IMG_WIDTH, 3), name='input')
def vgg16_model(input_data):
  x = Conv2D(64, (3, 3), activation='relu', padding='same', kernel_initializer='he_normal')(input_data)
  x = Conv2D(64, (3, 3), activation='relu', padding='same', kernel_initializer='he_normal')(x)
  x = BatchNormalization()(x)
  x = MaxPooling2D((2,2))(x)
 
  x = Conv2D(128, (3, 3), activation='relu', padding='same', kernel_initializer='he_normal')(x)
  x = Conv2D(128, (3, 3), activation='relu', padding='same', kernel_initializer='he_normal')(x)
  x = BatchNormalization()(x)
  x = MaxPooling2D((2,2))(x)

  x = Conv2D(256, (3, 3), activation='relu', padding='same', kernel_initializer='he_normal')(x)
  x = Conv2D(256, (3, 3), activation='relu', padding='same', kernel_initializer='he_normal')(x)
  x = Conv2D(256, (3, 3), activation='relu', padding='same', kernel_initializer='he_normal')(x)
  x = BatchNormalization()(x)
  x = MaxPooling2D((2,2))(x)

  x = Conv2D(512, (3, 3), activation='relu', padding='same', kernel_initializer='he_normal')(x)
  x = Conv2D(512, (3, 3), activation='relu', padding='same', kernel_initializer='he_normal')(x)
  x = Conv2D(512, (3, 3), activation='relu', padding='same', kernel_initializer='he_normal')(x)
  x = BatchNormalization()(x)
  x = MaxPooling2D((2,2))(x)

  x = Conv2D(512, (3, 3), activation='relu', padding='same', kernel_initializer='he_normal')(x)
  x = Conv2D(512, (3, 3), activation='relu', padding='same', kernel_initializer='he_normal')(x)
  x = Conv2D(512, (3, 3), activation='relu', padding='same', kernel_initializer='he_normal')(x)
  x = BatchNormalization()(x)
  x = MaxPooling2D((2,2))(x)

  x = Flatten()(x)
  x = Dense(256, activation='relu')(x)
  x = BatchNormalization()(x)
  x = Dense(1, activation='sigmoid')(x)

  return Model(input_data, x)
  

vgg16 = vgg16_model(input_tensor)

optimizer = optimizers.SGD(lr=0.001, momentum=0.9)

vgg16.compile(optimizer=optimizer,
              loss='binary_crossentropy',
              metrics=['accuracy'])
              
vgg16.summary()
